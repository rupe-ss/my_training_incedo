const express = require("express");
const auth = require("../../middleware/auth");
const Ticket = require("../../models/Ticket");
const User = require("../../models/User");
const Employee = require("../../models/Employee");
const router = express.Router();

router.get("/", (req, res) => {
  res.send("ticket / API Called..");
});

/* 
   @Path: /api/ticket/add
   @body: issue*, priority*, email*: from token
*/
router.post("/add", auth, async (req, res) => {
  const { id } = req.user;
  const user = await User.findById(id);
  /* Read email from the token */
  const email = user.email;

  const { issue, priority } = req.body;

  let ticket = new Ticket({
    issue,
    priority,
    email,
  });

  ticket = await ticket.save();

  res.send(ticket);
});

/* 
   @Path: /api/ticket/add
   @token: managerEmail
   @body: issue*, priority*, email*: from token
   @Description: Return all tickets generated by employees managed by manager
*/
router.get("/all", auth, async (req, res) => {
  const { id } = req.user;
  const user = await User.findById(id);
  /* Read email from the token */
  const email = user.email;

  if (!(user.role === "MANAGER"))
    return res.send(401).json({ msg: "Unauthorized" });

  let tickets = [];

  /* Fetch all employees having managerEmail as user.email*/
  const employees = await Employee.find({ managerEmail: user.email });
  for (let e of employees) {
    /*For each employeee, fetch all open tickets */
    let ticketArray = await Ticket.find({
      $and: [{ email: e.email }, { status: "OPEN" }],
    });
    tickets = [...tickets, ...ticketArray];
  }
  res.send(tickets);
});

/* 
   @Path: /api/ticket/response
   @token: managerEmail
   @body: ticketId*, response*
   @Description: Manager will provide response to the created ticket
*/
router.put("/response", auth, async (req, res) => {
  const { id } = req.user;
  const user = await User.findById(id);

  /* Read email from the token */
  const email = user.email;

  if (!(user.role === "MANAGER"))
    return res.send(401).json({ msg: "Unauthorized" });

  const { ticketId, response } = req.body;
  let ticket = await Ticket.findById(ticketId);

  ticket.response = response;

  ticket = await ticket.save();

  res.send(ticket);
});

module.exports = router;
